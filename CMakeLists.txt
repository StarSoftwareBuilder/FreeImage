cmake_minimum_required(VERSION 2.8.0)

project (FreeImage)
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)

# FreeImage version
SET( FREEIMAGE_VERSION_MAIN 3)
SET( FREEIMAGE_VERSION_MIDDLE 16)
SET( FREEIMAGE_VERSION_LOWER 0)
SET( FREEIMAGE_VERSION_MINOR 0)
SET( FREEIMAGE_VERSION ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER} )
SET( FREEIMAGE_VERSION_BUILD ${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER}.${FREEIMAGE_VERSION_MINOR} )

OPTION(FREEIMAGE_USE_SYSTEM_ZLIB "If ON build FreeImage with Zlib." ON)
OPTION(FREEIMAGE_USE_SYSTEM_JPEG "If ON build FreeImage with jpeg." ON)
OPTION(FREEIMAGE_USE_SYSTEM_PNG "If ON build FreeImage with png." ON)
OPTION(FREEIMAGE_USE_SYSTEM_TIFF "If ON build FreeImage with tiff." ON)


SET(FREEIMAGE_STATIC_DEP_LIBRARIES OpenEXR_s LibMNG_s LibOpenJPEG_s LibRawLite_s LibWebP_s)
IF(NOT FREEIMAGE_USE_SYSTEM_ZLIB)
    OPTION(FREEIMAGE_BUILD_ZLIB_DLL "If ON build Zlib as FreeImageZlib.dll. If OFF Zlib is staticly linked with FreeImage.")
    IF(NOT FREEIMAGE_BUILD_ZLIB_DLL)
        SET(FREEIMAGE_BUILD_ZLIB_STATIC ON)
        LIST(APPEND FREEIMAGE_STATIC_DEP_LIBRARIES Zlib_s)
    ENDIF(NOT FREEIMAGE_BUILD_ZLIB_DLL)
    IF(NOT ZLIB_INCLUDE_DIR)
        SET(ZLIB_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/Source/Zlib)
    ENDIF(NOT ZLIB_INCLUDE_DIR)
ELSE(NOT FREEIMAGE_USE_SYSTEM_ZLIB)
    FIND_PACKAGE(zlib REQUIRED)
    INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIRS})
ENDIF(NOT FREEIMAGE_USE_SYSTEM_ZLIB)

IF(NOT FREEIMAGE_USE_SYSTEM_JPEG)
    OPTION(FREEIMAGE_BUILD_JPEG_DLL "If ON build LibJPEG as FreeImageJPEG.dll. If OFF LibJPEG is staticly linked with FreeImage.")
    IF(NOT FREEIMAGE_BUILD_JPEG_DLL)
        SET(FREEIMAGE_BUILD_JPEG_STATIC ON)
        LIST(APPEND FREEIMAGE_STATIC_DEP_LIBRARIES LibJPEG_s)
    ENDIF(NOT FREEIMAGE_BUILD_JPEG_DLL)
ELSE(NOT FREEIMAGE_USE_SYSTEM_JPEG)
    FIND_PACKAGE(jpeg REQUIRED)
    INCLUDE_DIRECTORIES(${JPEG_INCLUDE_DIR})
ENDIF(NOT FREEIMAGE_USE_SYSTEM_JPEG)

IF(NOT FREEIMAGE_USE_SYSTEM_PNG)
    OPTION(FREEIMAGE_BUILD_PNG_DLL "If ON build LibPNG as FreeImagePNG.dll. If OFF LibPNG is staticly linked with FreeImage.")
    IF(NOT FREEIMAGE_BUILD_PNG_DLL)
        SET(FREEIMAGE_BUILD_PNG_STATIC ON)
        LIST(APPEND FREEIMAGE_STATIC_DEP_LIBRARIES LibPNG_s)
    ENDIF(NOT FREEIMAGE_BUILD_PNG_DLL)
ELSE(NOT FREEIMAGE_USE_SYSTEM_PNG)
    FIND_PACKAGE(png REQUIRED)
    INCLUDE_DIRECTORIES(${PNG_INCLUDE_DIRS})
ENDIF(NOT FREEIMAGE_USE_SYSTEM_PNG)

IF(NOT FREEIMAGE_USE_SYSTEM_TIFF)
    OPTION(FREEIMAGE_BUILD_TIFF_DLL "If ON build LibTIFF as FreeImageTIFF.dll. If OFF LibTIFF is staticly linked with FreeImage.")
    IF(NOT FREEIMAGE_BUILD_TIFF_DLL)
        SET(FREEIMAGE_BUILD_TIFF_STATIC ON)
        LIST(APPEND FREEIMAGE_STATIC_DEP_LIBRARIES LibTIFF_s)
    ENDIF(NOT FREEIMAGE_BUILD_TIFF_DLL)
ELSE(NOT FREEIMAGE_USE_SYSTEM_TIFF)
    FIND_PACKAGE(tiff REQUIRED)
    INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIR})
ENDIF(NOT FREEIMAGE_USE_SYSTEM_TIFF)

OPTION(FREEIMAGE_DYNAMIC_C_RUNTIME "If ON build FreeImage with dynamicly linked C/C++ runtime. If OFF FreeImage is staticly linked with C/C++ runtime.")


IF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)
    # Set to link staticly with runtime
    set(CMAKE_USER_MAKE_RULES_OVERRIDE
       ${CMAKE_CURRENT_SOURCE_DIR}/c_flag_overrides.cmake)
    set(CMAKE_USER_MAKE_RULES_OVERRIDE_CXX
       ${CMAKE_CURRENT_SOURCE_DIR}/cxx_flag_overrides.cmake)
ENDIF(NOT FREEIMAGE_DYNAMIC_C_RUNTIME)


# Check parameters
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckFunctionExists)
INCLUDE(CheckTypeSize)

# Set default output dirs
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)


# Set libraries for static or DLL build
IF(FREEIMAGE_BUILD_STATIC)
    SET(FREEIMAGE_LIBRARIES FreeImage_s ${FREEIMAGE_STATIC_DEP_LIBRARIES})
    SET(FREEIMAGE_BUILD_FLAGS -DFREEIMAGE_LIB)
ELSE(FREEIMAGE_BUILD_STATIC)
    SET(FREEIMAGE_LIBRARIES FreeImage)
    SET(FREEIMAGE_BUILD_DLL ON)
ENDIF(FREEIMAGE_BUILD_STATIC)
SET(FREEIMAGE_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/Source)
SET(FREEIMAGE_LIBRARY_DIRS ${CMAKE_BINARY_DIR}/Lib)

add_subdirectory(Source)
add_subdirectory(TestAPI)

# Automatic ZIP packaging
SET(CPACK_GENERATOR ZIP)
SET(CPACK_PACKAGE_FILE_NAME FreeImage-${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER} )
SET(CPACK_PACKAGE_NAME FreeImage )
SET(CPACK_PACKAGE_VERSION "${FREEIMAGE_VERSION_MAIN}.${FREEIMAGE_VERSION_MIDDLE}.${FREEIMAGE_VERSION_LOWER}" )
INCLUDE(CPack)
INSTALL(FILES license-fi.txt license-gplv3.txt README.minGW Whatsnew.txt DESTINATION .)
INSTALL(DIRECTORY Examples DESTINATION .
     PATTERN "CVS" EXCLUDE)
INSTALL(DIRECTORY Wrapper DESTINATION .
     PATTERN "CVS" EXCLUDE)
